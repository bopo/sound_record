<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="238" height="140"
			   creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.audio.format.WAVWriter;
			import com.hurlant.util.Base64;
			
			import flash.events.SampleDataEvent;
			import flash.events.ActivityEvent;
			import flash.external.ExternalInterface;
			import flash.media.Microphone;
			import flash.media.Sound;
			import flash.utils.ByteArray;
			import flash.system.Security;
			
			import fr.kikko.lab.ShineMP3Encoder;
									
			[Bindable] private var microphoneList:Array;
			protected var microphone:Microphone = Microphone.getMicrophone();;
			protected var isRecording:Boolean = false;
			protected var soundRecording:ByteArray;
			
			private var urlReq:URLRequest;
			private var sound:Sound = new Sound();
			private var sChannel:SoundChannel;
			private var playRecord:Boolean = true;
			private var mp3Encoder:ShineMP3Encoder;
			
			/**
			 *  初始化方法 
			 * */
			protected function init():void
			{
				Security.allowDomain("*");
				Security.allowInsecureDomain("*"); 

				microphoneList = Microphone.names;
				
				setupMicrophone(); //自动选择第一个音频硬件
				
				ExternalInterface.addCallback("startMicRecording", startMicRecording);
				ExternalInterface.addCallback("stopMicRecording", stopMicRecording);
				ExternalInterface.addCallback("playbackData", playbackData);
				ExternalInterface.addCallback("stopPlaybackData", stopPlaybackData);
				ExternalInterface.addCallback("saveAudioCallBack", saveAudioCallBack);
				ExternalInterface.addCallback("cancelMicRecording", cancelMicRecording);
			}
			
			/**
			 * 选择麦克风
			 * 
			 * */
			protected function setupMicrophone():void
			{
				microphone = Microphone.getMicrophone(0);
				microphone.rate = 44;
				microphone.setUseEchoSuppression(true);
				microphone.setLoopBack(false);
				microphone.setSilenceLevel(0,0);
				microphone.gain=50;
			}
			
			protected function processSound(event:SampleDataEvent):void
			{
				var bytes:ByteArray = new ByteArray();
				this.sound.extract(bytes, 5096); 
				
				while(bytes.bytesAvailable) {
					var sample:Number = bytes.readFloat();      
				}
				event.data.writeBytes(bytes);
			}
			
			/**
			 * 开始录音
			 * 
			 * */
			public function startMicRecording():void
			{	
				isRecording = true;
				soundRecording = new ByteArray();
				microphone.addEventListener(SampleDataEvent.SAMPLE_DATA, gotMicData);
				
				if(sChannel){
					sChannel.stop();
				}
				this.sound.addEventListener(SampleDataEvent.SAMPLE_DATA, processSound);
				sChannel = this.sound.play();
				
				microphone.addEventListener(ActivityEvent.ACTIVITY,microphoneActivity);
			}
			
			/**
			 * 停止录音
			 * 
			 * */
			public function stopMicRecording():void
			{
				isRecording = false;
				microphone.removeEventListener(SampleDataEvent.SAMPLE_DATA, gotMicData);
				if(sChannel){
					sChannel.stop();
				}
				sound.removeEventListener(SampleDataEvent.SAMPLE_DATA, processSound);
				
				ExternalInterface.call("saveAudioCallBack");
			}
			
			/**
			 *  面板允许后的响应事件方法
			 * */
			public function microphoneActivity(e:ActivityEvent):void
			{
				if(e.activating){
					ExternalInterface.call("startRealRecordCallBack");
				}
			}
			
			/**
			 *  取消录制
			 * */			
			public function cancelMicRecording():void
			{
				isRecording = false;
				
				if(sChannel){
					sChannel.stop();
				}
				sChannel = sound.play();
			}
			
			/**
			 *  保存音频文件
			 * */			
			public function saveAudioCallBack():void
			{
				encodeToMP3();
			}
			
			/**
			 * 开始录音：获取声音
			 * 
			 * */
			private function gotMicData(micData:SampleDataEvent):void
			{
				while(micData.data.bytesAvailable) {
					var sample:Number = micData.data.readFloat();      
					soundRecording.writeFloat(sample);
				}
			}
			
			/**
			 * 播放录音
			 * 
			 * */
			public function playbackData():void
			{
				soundRecording.position = 0;
				playRecord = true;
				
				this.sound.addEventListener(SampleDataEvent.SAMPLE_DATA, playSound);
				this.sound.play();
				this.sound.addEventListener(Event.SOUND_COMPLETE, onSoundComplete);
			}
			
			/**
			 *  停止播放录音
			 * */			
			public function stopPlaybackData():void{
				playRecord = false;
				this.sChannel.stop();
				ExternalInterface.call("playBackOverCallBack","playBackOverCallBack");
			}
			
			/**
			 *  声音加载完成
			 * */		
			private function onSoundComplete(event:Event):void {
				if(playRecord) {
					this.sChannel = this.sound.play();
					this.sChannel.stop();
					playRecord = false;
				}
				this.sChannel.removeEventListener(Event.SOUND_COMPLETE, onSoundComplete);
			}
			
			/**
			 *  加载播放的音频文件
			 * */			
			private function playSound(event:SampleDataEvent):void
			{
				if(playRecord == false){
					return;
				}
				
				if (!soundRecording.bytesAvailable > 0){
					stopPlaybackData();
					return;				
				}

				for (var i:int = 0; i < 5096; i++)
				{
					var sample:Number = 0.0;
					if (this.soundRecording.bytesAvailable > 0){
						sample = this.soundRecording.readFloat();
					}
					event.data.writeFloat(sample); 
					event.data.writeFloat(sample);  
				}
			}
			
			/**
			 *  MP3格式转换
			 * */
			private function encodeToMP3():void {
				var wavWriter:WAVWriter = new WAVWriter();
				soundRecording.position = 0;
			
				wavWriter.numOfChannels = 1; 
				wavWriter.sampleBitRate = 16; 
				wavWriter.samplingRate = 44100; 
				
				var wav:ByteArray = new ByteArray();

				wavWriter.processSamples(wav, soundRecording, 44100, 1);
				
				wav.position = 0;
				
				mp3Encoder = new ShineMP3Encoder(wav);
				mp3Encoder.addEventListener(Event.COMPLETE, mp3EncodeComplete);
				mp3Encoder.addEventListener(ProgressEvent.PROGRESS, mp3EncodeProgress);
				mp3Encoder.addEventListener(ErrorEvent.ERROR, mp3EncodeError);
				mp3Encoder.start();
			}
			
			/**
			 * MP3转码处理中响应事件方法
			 * */
			private function mp3EncodeProgress(event : ProgressEvent) : void {
			}
			
			/**
			 * MP3转码处理错误响应事件方法
			 * */			
			private function mp3EncodeError(event : ErrorEvent) : void {
			}
			
			/**
			 * MP3转码处理完成响应事件方法
			 * */	
			private function mp3EncodeComplete(event:Event) : void {
				mp3Encoder.mp3Data.position = 0;
				upload();
			}
			
			/**
			 *  上传音频文件
			 * */						
			public function upload():void{
				
				var params:URLVariables=new URLVariables();
				var soundUploadConfig:Object = ExternalInterface.call("soundUploadConfig","");
				for(var i:* in soundUploadConfig){
					params[i] = soundUploadConfig[i];
				}
				var dataContent:String = Base64.encodeByteArray(mp3Encoder.mp3Data);
				//   +/=
				var myPattern:RegExp = /+/gi; 
				dataContent = dataContent.replace(myPattern, "*");
				
				var myPattern2:RegExp = /=/gi; 
				dataContent = dataContent.replace(myPattern2, "-");
				
				var myPattern3:RegExp = /\//gi; 
				dataContent = dataContent.replace(myPattern3, "#");
				
				params.file = dataContent;
				
				var _request:URLRequest = new URLRequest();
				_request.url = soundUploadConfig.uploadURL;
				_request.method = URLRequestMethod.POST;
				_request.data = params;					
				_request.requestHeaders = new Array(new URLRequestHeader("Content-Type", "application/x-www-form-urlencoded"));
				
				var urlLoader:URLLoader = new URLLoader();
				urlLoader.dataFormat = URLLoaderDataFormat.TEXT;
				urlLoader.addEventListener(Event.COMPLETE, function(event:Event):void{
					var bytesqq:ByteArray = new ByteArray();
					ExternalInterface.call("soundUploadCallback", event.currentTarget.data);
				});
				urlLoader.load(_request);
			}
			
		]]>
	</fx:Script>
	
</s:Application>